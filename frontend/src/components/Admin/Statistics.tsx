import React from 'react';
import './css/AdminScreen.css'; // CSSファイルをインポート

const Statistics: React.FC = () => {
  return (
    <div>
      <h2 className="admin-h2">統計と分析（社員の成績を確認）</h2>
      {/* 統計と分析機能をここに追加 */}
      外部APIの無料AIを使用して成績を可視化する手順 1. APIサーバーの設定（Go）
      1-1. データ取得関数の作成 -
      データベースから社員の成績データを取得する関数を作成。 1-2.
      エンドポイントの作成 -
      HTTPリクエストを受け取り、データを返すエンドポイントを作成。 1-3.
      サーバーの起動 - サーバーを起動し、エンドポイントが正しく動作するか確認。
      2. フロントエンドの設定（React） 2-1. コンポーネントの作成 -
      新しいコンポーネントファイルを作成し、社員の成績データを表示するための基本的なUIを作成。
      2-2. APIリクエストの設定 -
      `axios`を使用してAPIサーバーからデータを取得するリクエストを設定。 2-3.
      データの表示 - 取得したデータをReactの状態に保存し、UIに表示。 3.
      CORSの設定 3-1. CORSミドルウェアの設定 -
      `handlers.CORS`を使用してCORSの設定を行う。 4.
      外部APIの無料AIにアクセスする手順 4-1. 外部APIの選定 -
      使用する外部API（Looker Studio、Power BI、Tableau
      Public、Grafanaなど）を選定。 4-2. APIキーの取得 -
      外部APIの公式サイトでアカウントを作成し、APIキーを取得。 4-3.
      APIリクエストの設定 -
      フロントエンド（React）で外部APIにアクセスするためのリクエストを設定。`axios`を使用してAPIキーを含むリクエストを送信。
      4-4. データの送信 -
      取得した社員の成績データを外部APIに送信し、可視化のためのリクエストを行う。
      4-5. 可視化結果の表示 -
      外部APIから返された可視化結果をReactのコンポーネントに表示。 ### Looker
      Studioを使用する場合の手順 1. Looker Studioアカウントの作成 - Looker
      Studioの公式サイトでアカウントを作成。 2. データソースの設定 - Looker
      Studioで新しいデータソースを作成し、PostgreSQLデータベースと接続。 3.
      ダッシュボードの作成 - Looker
      Studioで新しいダッシュボードを作成し、社員の成績データを可視化するためのチャートやグラフを追加。
      4. ダッシュボードの埋め込み - Looker
      Studioで作成したダッシュボードをReactアプリに埋め込むための埋め込みコードを取得し、Reactコンポーネントに追加。
    </div>
  );
};

export default Statistics;
